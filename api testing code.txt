// Fixed the assertion value
console.log('successfully done')


let filePath = '/home/saribshamim/1. Sarib Shamim/postmanResponses/output.csv';
let responseHeaderOfAPI;
let jsonDataId;
let idFound;
let statusCode200;
let propertyBody;
let responsBody;
let statusCode;
let url;


pm.test("Status code is 200", function () {
    statusCode200 = pm.response.to.have.status(200);
});

let jsonData = pm.response.json();
jsonDataId = jsonData.id;
responsBody = pm.response.text();
statusCode = pm.response.code;

pm.test('Asserting the ID', function (){
idFound = pm.expect(jsonDataId).to.eql(parseInt(pm.collectionVariables.get('parameter')));
}
);

pm.test('Checking body property', function () {
    propertyBody = pm.expect(pm.response.json()).to.have.property('body');
});

if (statusCode200 && idFound && propertyBody)
console.log('All tests have been passed !')

url = pm.collectionVariables.get('url')+'/posts/'+pm.collectionVariables.get('parameter');

responseHeaderOfAPI = pm.response.headers.get('date');

console.log('the URL: ' + url);
console.log('the response body: '+responsBody);
console.log('the status code: '+ statusCode);
console.log('the date from responseHeader:  '+responseHeaderOfAPI);

//let responseHeaderss = pm.response.headers.toObject();

// Log each key-value pair in the headers object
// console.log("Response Headers:");
// for (let headerName in responseHeaderss) {
//   if (responseHeaderss.hasOwnProperty(headerName)) {
//     let headerValue = responseHeaderss[headerName];
//     console.log(`${headerName}: ${headerValue}`);
//   }
// }

let csvData = `URL,Response header,Status Code,Response Body\n${url},${responseHeaderOfAPI},${statusCode},${responseBody}`;

pm.test( 'Checking properties', function(){

    pm.expect(jsonData).to.have.property('title');
    pm.expect(jsonData.title).to.be.a('string');
    pm.expect(jsonData.id).to.be.greaterThan(0);
    pm.expect(jsonData.userId).to.be.eql(1);
}
);

pm.test('Matching id property with Regex',function(){
    pm.expect(jsonData.id).to.match(/[0-9]/);
});

//pm.collectionVariables.set('RandomName',pm.variables.replaceIn('{{$randomFullName}}'));

console.log(pm.collectionVariables.get('RandomName'));


// Set the CSV data as a global variable
//postman.setGlobalVariable('csvData', csvData);

// Log the data to the console
//console.log(csvData);

const schema = {
  "type": "object",
  "properties": {
    "userId": {
      "type": "integer"
    },
    "id": {
      "type": "integer"
    },
    "title": {
      "type": "string"
    },
    "body": {
      "type": "string"
    }
  },
  "required": ["userId", "id", "title", "body"]
};

//const jsonData = pm.response.json(); // Get the response data

// Validate against the schema

pm.test('Checking schema',function(){
    pm.expect(jsonData).to.have.jsonSchema(schema);
});


//Log in Postman CLI

postman login --with-api-key {{postman-api-key-here}}
postman collection run ....COllectionIDGivenByPostman....

//https://learning.postman.com/docs/postman-cli/postman-cli-options/#running-collections


